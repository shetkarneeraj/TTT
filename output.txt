Learning language for regex: '(a|b)*b' over alphabet 'ab'
[DEBUG And.__init__] Initializing And with r1=Star, r2=Char
[DEBUG] Adding state 1 with transitions {}
[DEBUG] Adding state 1 with transitions {}
[DEBUG] Adding state 1 with transitions {}
[DEBUG Star.to_nfa] NFA created: states={0, 1, 2, 3, 4, 5}, final={0}, next_state=6
[DEBUG] Adding state 1 with transitions {}
[DEBUG And.to_nfa] NFA created: states={0, 1, 2, 3, 4, 5, 6, 7}, final={7}, next_state=8
[DEBUG NFA.remove_epsilon] Starting epsilon removal
[DEBUG NFA.remove_epsilon] Initialized new NFA: states={0, 1, 2, 3, 4, 5, 6, 7}, final={7}
[DEBUG NFA.remove_epsilon] Visiting state 0, seen={0}
[DEBUG NFA.remove_epsilon] Visiting state 2, seen={0, 2}
[DEBUG NFA.remove_epsilon] Visiting state 6, seen={0, 2, 6}
[DEBUG NFA.remove_epsilon] Visiting state 1, seen={1}
[DEBUG NFA.remove_epsilon] Visiting state 2, seen={2}
[DEBUG NFA.remove_epsilon] Visiting state 3, seen={3}
[DEBUG NFA.remove_epsilon] Visiting state 0, seen={0, 3}
[DEBUG NFA.remove_epsilon] Visiting state 2, seen={0, 2, 3}
[DEBUG NFA.remove_epsilon] Visiting state 6, seen={0, 2, 3, 6}
[DEBUG NFA.remove_epsilon] Visiting state 4, seen={4}
[DEBUG NFA.remove_epsilon] Visiting state 5, seen={5}
[DEBUG NFA.remove_epsilon] Visiting state 0, seen={0, 5}
[DEBUG NFA.remove_epsilon] Visiting state 2, seen={0, 2, 5}
[DEBUG NFA.remove_epsilon] Visiting state 6, seen={0, 2, 5, 6}
[DEBUG NFA.remove_epsilon] Visiting state 6, seen={6}
[DEBUG NFA.remove_epsilon] Visiting state 7, seen={7}
[DEBUG NFA.remove_epsilon] Marking state 7 as final
[DEBUG NFA.remove_epsilon] Before trimming: states={0, 1, 2, 3, 4, 5, 6, 7}, transitions={0: {'a': {3}, 'b': {7}}, 1: {}, 2: {'a': {3}}, 3: {'a': {3}, 'b': {7}}, 4: {'b': {5}}, 5: {'a': {3}, 'b': {7}}, 6: {'b': {7}}, 7: {}}
[DEBUG NFA.trim_unreachable] Starting BFS from state 0
[DEBUG NFA.trim_unreachable] Visited state 0
[DEBUG NFA.trim_unreachable] Visited state 3
[DEBUG NFA.trim_unreachable] Visited state 7
[DEBUG NFA.trim_unreachable] Removing unreachable state 1
[DEBUG NFA.trim_unreachable] Removing unreachable state 2
[DEBUG NFA.trim_unreachable] Removing unreachable state 4
[DEBUG NFA.trim_unreachable] Removing unreachable state 5
[DEBUG NFA.trim_unreachable] Removing unreachable state 6
[DEBUG NFA.remove_epsilon] After trimming: states={0, 3, 7}, transitions={0: {'a': {3}, 'b': {7}}, 3: {'a': {3}, 'b': {7}}, 7: {}}
[DEBUG NFA.determinise] Epsilon-free NFA: states={0, 3, 7}, final={7}
[DEBUG NFA.determinise] Subsets for DFA states: [(), (0,), (3,), (7,), (0, 3), (0, 7), (3, 7), (0, 3, 7)]
[DEBUG NFA.determinise] DFA start state: 1
[DEBUG NFA.determinise] DFA final states: {3, 5, 6, 7}
[DEBUG DFA.trim_unreachable] Starting to trim unreachable states
[DEBUG DFA.trim_unreachable] Starting BFS from state 1
[DEBUG DFA.trim_unreachable] Visited state 1
[DEBUG DFA.trim_unreachable] Queued state 2
[DEBUG DFA.trim_unreachable] Queued state 3
[DEBUG DFA.trim_unreachable] Visited state 2
[DEBUG DFA.trim_unreachable] Queued state 3
[DEBUG DFA.trim_unreachable] Visited state 3
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Visited state 0
[DEBUG DFA.trim_unreachable] Removing unreachable state 4
[DEBUG DFA.trim_unreachable] Removing unreachable state 5
[DEBUG DFA.trim_unreachable] Removing unreachable state 6
[DEBUG DFA.trim_unreachable] Removing unreachable state 7
[DEBUG DFA.trim_unreachable] Final states: {0, 1, 2, 3}
[DEBUG NFA.determinise] Final DFA: states={0, 1, 2, 3}, transitions={0: {'a': 0, 'b': 0}, 1: {'a': 2, 'b': 3}, 2: {'a': 2, 'b': 3}, 3: {'a': 0, 'b': 0}}
[DEBUG Node.make_leaf] Creating new leaf node
[DEBUG Node.__init__] Node created: temporary=False, depth=0
[DEBUG Node.make_leaf] Creating new leaf node
[DEBUG Node.__init__] Node created: temporary=False, depth=0
[DEBUG Node.__init__] Node created: temporary=False, depth=0
[DEBUG Node.block.setter] Setting block of Node<None> to None
[DEBUG Node.block.setter] Setting block of Node<None> to None
[DEBUG Node.make_inner] Inner node created: Node<>
[DEBUG State.__init__] State created: id=0, aseq=''
[DEBUG Transition.__init__] Transition created: incoming_non_tree={<__main__.Transition object at 0x10e4af8c0>}
[DEBUG Transition.__init__] Transition created: incoming_non_tree={<__main__.Transition object at 0x10e4af8c0>, <__main__.Transition object at 0x10edd0cd0>}
[DEBUG Hypothesis.add_state] State added: q0, transitions={'a': <__main__.Transition object at 0x10e4af8c0>, 'b': <__main__.Transition object at 0x10edd0cd0>}
[DEBUG DFA.evaluate] Evaluating input string ''
[DEBUG DFA.evaluate] Evaluation result: False, final state: 1
[DEBUG Node.sift] Query '' -> 0, moving to child Node<None>
[DEBUG DFA.evaluate] Evaluating input string ''
[DEBUG DFA.evaluate] Evaluation result: False, final state: 1
[DEBUG Refiner.__init__] Initializing Refiner
[DEBUG Refiner.__init__] Refiner initialized with teacher=<__main__.PerfectTeacher object at 0x10e64ba10>, hypothesis=<__main__.Hypothesis object at 0x10e64b8c0>
[DEBUG Node.state.setter] Linking state q0 to node Node<None>
[DEBUG Node.block.setter] Setting block of Node<q0> to Node<q0>
[DEBUG Node.state.setter] Updated block=Node<q0>
[DEBUG Node.link] Linked: node.state=q0, state.node=Node<q0>
[DEBUG Transition.target_state] Getting target state for aseq='a': None
[DEBUG DFA.evaluate] Evaluating input string 'a'
[DEBUG DFA.evaluate] Processing character 'a' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 2
[DEBUG DFA.evaluate] Evaluation result: False, final state: 2
[DEBUG Node.sift] Query 'a' -> 0, moving to child Node<q0>
[DEBUG Transition.is_tree] Transition a is_tree: False
[DEBUG Transition.target_node.setter] Updated target_node=Node<q0>, incoming_non_tree={<__main__.Transition object at 0x10e4af8c0>}
[DEBUG Transition.target_state] Getting target state for aseq='b': None
[DEBUG DFA.evaluate] Evaluating input string 'b'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Evaluation result: True, final state: 3
[DEBUG Node.sift] Query 'b' -> 1, moving to child Node<None>
[DEBUG Transition.is_tree] Transition b is_tree: False
[DEBUG Transition.target_node.setter] Updated target_node=Node<None>, incoming_non_tree={<__main__.Transition object at 0x10edd0cd0>}
[DEBUG Transition.is_tree] Transition b is_tree: False
[DEBUG State.__init__] State created: id=1, aseq='b'
[DEBUG Transition.__init__] Transition created: incoming_non_tree={<__main__.Transition object at 0x10f208050>}
[DEBUG Transition.__init__] Transition created: incoming_non_tree={<__main__.Transition object at 0x10f208050>, <__main__.Transition object at 0x1120703e0>}
[DEBUG Hypothesis.add_state] State added: q1, transitions={'a': <__main__.Transition object at 0x10f208050>, 'b': <__main__.Transition object at 0x1120703e0>}
[DEBUG Transition.target_state.setter] Setting target state for aseq='b' to q1
[DEBUG Node.parent.setter] Updated depth=1, block=None
[DEBUG Node.parent.setter] Updated depth=1, block=None
[DEBUG Node.parent_value] Checking parent value for node Node<None>
[DEBUG Node.parent.setter] Updated depth=1, block=None
[DEBUG Node.parent.setter] Updated depth=1, block=None
[DEBUG Node.parent.setter] Updated depth=1, block=None
[DEBUG Node.parent_value] Node is right child, returning True
[DEBUG Node.parent.setter] Updated depth=1, block=None
[DEBUG Node.parent.setter] Updated depth=0, block=None
[DEBUG Hypothesis.make_final] Marking state q1 as final
[DEBUG Node.state.setter] Linking state q1 to node Node<None>
[DEBUG Node.block.setter] Setting block of Node<q1> to Node<q1>
[DEBUG Node.state.setter] Updated block=Node<q1>
[DEBUG Node.link] Linked: node.state=q1, state.node=Node<q1>
[DEBUG DFA.evaluate] Evaluating input string 'b'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Evaluation result: True, final state: 3
[DEBUG Hypothesis.make_final] Marking state q1 as final
[DEBUG Transition.target_state] Getting target state for aseq='ba': None
[DEBUG DFA.evaluate] Evaluating input string 'ba'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Processing character 'a' at position 1, current state: 3
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Evaluation result: False, final state: 0
[DEBUG Node.sift] Query 'ba' -> 0, moving to child Node<q0>
[DEBUG Transition.is_tree] Transition ba is_tree: False
[DEBUG Transition.target_node.setter] Updated target_node=Node<q0>, incoming_non_tree={<__main__.Transition object at 0x10e4af8c0>, <__main__.Transition object at 0x10f208050>}
[DEBUG Transition.target_state] Getting target state for aseq='bb': None
[DEBUG DFA.evaluate] Evaluating input string 'bb'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Processing character 'b' at position 1, current state: 3
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Evaluation result: False, final state: 0
[DEBUG Node.sift] Query 'bb' -> 0, moving to child Node<q0>
[DEBUG Transition.is_tree] Transition bb is_tree: False
[DEBUG Transition.target_node.setter] Updated target_node=Node<q0>, incoming_non_tree={<__main__.Transition object at 0x10e4af8c0>, <__main__.Transition object at 0x10f208050>, <__main__.Transition object at 0x1120703e0>}

--- Initial Discrimination Tree ---
[DEBUG visualize_dtree] Starting visualization of discrimination tree
[DEBUG visualize_dtree] Displaying visualization

--- Discrimination Tree at start of Iteration 1 ---
[DEBUG visualize_dtree] Starting visualization of discrimination tree
[DEBUG visualize_dtree] Displaying visualization

[DEBUG Hypothesis.to_dfa] Converting hypothesis to DFA
[DEBUG Transition.target_state] Getting target state for aseq='a': q0
[DEBUG Transition.target_state] Getting target state for aseq='a': q0
[DEBUG Transition.target_state] Getting target state for aseq='a': q0
[DEBUG Hypothesis.to_dfa] Added DFA transition 0 --a--> 0
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Hypothesis.to_dfa] Added DFA transition 0 --b--> 1
[DEBUG Transition.target_state] Getting target state for aseq='ba': q0
[DEBUG Transition.target_state] Getting target state for aseq='ba': q0
[DEBUG Transition.target_state] Getting target state for aseq='ba': q0
[DEBUG Hypothesis.to_dfa] Added DFA transition 1 --a--> 0
[DEBUG Transition.target_state] Getting target state for aseq='bb': q0
[DEBUG Transition.target_state] Getting target state for aseq='bb': q0
[DEBUG Transition.target_state] Getting target state for aseq='bb': q0
[DEBUG Hypothesis.to_dfa] Added DFA transition 1 --b--> 0
[DEBUG DFA.close_with_sink] Adding sink state 3 for alphabet ['a', 'b']
[DEBUG DFA.add_state] Adding state 3 with transitions {'a': 3, 'b': 3}
[DEBUG DFA.close_with_sink] Transitions after adding sink: {0: {'a': 0, 'b': 1}, 1: {'a': 0, 'b': 0}, 3: {'a': 3, 'b': 3}}
[DEBUG Hypothesis.to_dfa] DFA after sink: transitions={0: {'a': 0, 'b': 1}, 1: {'a': 0, 'b': 0}, 3: {'a': 3, 'b': 3}}
[DEBUG DFA.is_equivalent] Checking equivalence with another DFA
[DEBUG DFA.complement] Creating complement DFA
[DEBUG DFA.complement] Complement final states: {0, 3}
[DEBUG DFA.intersection] Product states: [(0, 0), (0, 1), (0, 3), (1, 0), (1, 1), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3)]
[DEBUG DFA.intersection] Intersection start state: 3
[DEBUG DFA.intersection] Intersection final states: {9, 11}
[DEBUG DFA.intersection] Transition 0 --a--> 0 (from 0,0)
[DEBUG DFA.intersection] Transition 0 --b--> 1 (from 0,0)
[DEBUG DFA.intersection] Transition 1 --a--> 0 (from 0,1)
[DEBUG DFA.intersection] Transition 1 --b--> 0 (from 0,1)
[DEBUG DFA.intersection] Transition 2 --a--> 2 (from 0,3)
[DEBUG DFA.intersection] Transition 2 --b--> 2 (from 0,3)
[DEBUG DFA.intersection] Transition 3 --a--> 6 (from 1,0)
[DEBUG DFA.intersection] Transition 3 --b--> 10 (from 1,0)
[DEBUG DFA.intersection] Transition 4 --a--> 6 (from 1,1)
[DEBUG DFA.intersection] Transition 4 --b--> 9 (from 1,1)
[DEBUG DFA.intersection] Transition 5 --a--> 8 (from 1,3)
[DEBUG DFA.intersection] Transition 5 --b--> 11 (from 1,3)
[DEBUG DFA.intersection] Transition 6 --a--> 6 (from 2,0)
[DEBUG DFA.intersection] Transition 6 --b--> 10 (from 2,0)
[DEBUG DFA.intersection] Transition 7 --a--> 6 (from 2,1)
[DEBUG DFA.intersection] Transition 7 --b--> 9 (from 2,1)
[DEBUG DFA.intersection] Transition 8 --a--> 8 (from 2,3)
[DEBUG DFA.intersection] Transition 8 --b--> 11 (from 2,3)
[DEBUG DFA.intersection] Transition 9 --a--> 0 (from 3,0)
[DEBUG DFA.intersection] Transition 9 --b--> 1 (from 3,0)
[DEBUG DFA.intersection] Transition 10 --a--> 0 (from 3,1)
[DEBUG DFA.intersection] Transition 10 --b--> 0 (from 3,1)
[DEBUG DFA.intersection] Transition 11 --a--> 2 (from 3,3)
[DEBUG DFA.intersection] Transition 11 --b--> 2 (from 3,3)
[DEBUG DFA.trim_unreachable] Starting to trim unreachable states
[DEBUG DFA.trim_unreachable] Starting BFS from state 3
[DEBUG DFA.trim_unreachable] Visited state 3
[DEBUG DFA.trim_unreachable] Queued state 6
[DEBUG DFA.trim_unreachable] Queued state 10
[DEBUG DFA.trim_unreachable] Visited state 6
[DEBUG DFA.trim_unreachable] Queued state 10
[DEBUG DFA.trim_unreachable] Visited state 10
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Visited state 0
[DEBUG DFA.trim_unreachable] Queued state 1
[DEBUG DFA.trim_unreachable] Visited state 1
[DEBUG DFA.trim_unreachable] Removing unreachable state 2
[DEBUG DFA.trim_unreachable] Removing unreachable state 4
[DEBUG DFA.trim_unreachable] Removing unreachable state 5
[DEBUG DFA.trim_unreachable] Removing unreachable state 7
[DEBUG DFA.trim_unreachable] Removing unreachable state 8
[DEBUG DFA.trim_unreachable] Removing unreachable state 9
[DEBUG DFA.trim_unreachable] Removing unreachable state 11
[DEBUG DFA.trim_unreachable] Final states: {0, 1, 3, 6, 10}
[DEBUG DFA.intersection] Final intersection DFA: states={0, 1, 3, 6, 10}, transitions={0: {'a': 0, 'b': 1}, 1: {'a': 0, 'b': 0}, 3: {'a': 6, 'b': 10}, 6: {'a': 6, 'b': 10}, 10: {'a': 0, 'b': 0}}
[DEBUG DFA.is_equivalent] Self ∩ ¬Other DFA: states={0, 1, 3, 6, 10}, final={9, 11}
[DEBUG DFA.complement] Creating complement DFA
[DEBUG DFA.complement] Complement final states: {0, 1, 2}
[DEBUG DFA.intersection] Product states: [(0, 0), (0, 1), (0, 3), (1, 0), (1, 1), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3)]
[DEBUG DFA.intersection] Intersection start state: 3
[DEBUG DFA.intersection] Intersection final states: {1, 4, 7}
[DEBUG DFA.intersection] Transition 0 --a--> 0 (from 0,0)
[DEBUG DFA.intersection] Transition 0 --b--> 1 (from 0,0)
[DEBUG DFA.intersection] Transition 1 --a--> 0 (from 0,1)
[DEBUG DFA.intersection] Transition 1 --b--> 0 (from 0,1)
[DEBUG DFA.intersection] Transition 2 --a--> 2 (from 0,3)
[DEBUG DFA.intersection] Transition 2 --b--> 2 (from 0,3)
[DEBUG DFA.intersection] Transition 3 --a--> 6 (from 1,0)
[DEBUG DFA.intersection] Transition 3 --b--> 10 (from 1,0)
[DEBUG DFA.intersection] Transition 4 --a--> 6 (from 1,1)
[DEBUG DFA.intersection] Transition 4 --b--> 9 (from 1,1)
[DEBUG DFA.intersection] Transition 5 --a--> 8 (from 1,3)
[DEBUG DFA.intersection] Transition 5 --b--> 11 (from 1,3)
[DEBUG DFA.intersection] Transition 6 --a--> 6 (from 2,0)
[DEBUG DFA.intersection] Transition 6 --b--> 10 (from 2,0)
[DEBUG DFA.intersection] Transition 7 --a--> 6 (from 2,1)
[DEBUG DFA.intersection] Transition 7 --b--> 9 (from 2,1)
[DEBUG DFA.intersection] Transition 8 --a--> 8 (from 2,3)
[DEBUG DFA.intersection] Transition 8 --b--> 11 (from 2,3)
[DEBUG DFA.intersection] Transition 9 --a--> 0 (from 3,0)
[DEBUG DFA.intersection] Transition 9 --b--> 1 (from 3,0)
[DEBUG DFA.intersection] Transition 10 --a--> 0 (from 3,1)
[DEBUG DFA.intersection] Transition 10 --b--> 0 (from 3,1)
[DEBUG DFA.intersection] Transition 11 --a--> 2 (from 3,3)
[DEBUG DFA.intersection] Transition 11 --b--> 2 (from 3,3)
[DEBUG DFA.trim_unreachable] Starting to trim unreachable states
[DEBUG DFA.trim_unreachable] Starting BFS from state 3
[DEBUG DFA.trim_unreachable] Visited state 3
[DEBUG DFA.trim_unreachable] Queued state 6
[DEBUG DFA.trim_unreachable] Queued state 10
[DEBUG DFA.trim_unreachable] Visited state 6
[DEBUG DFA.trim_unreachable] Queued state 10
[DEBUG DFA.trim_unreachable] Visited state 10
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Visited state 0
[DEBUG DFA.trim_unreachable] Queued state 1
[DEBUG DFA.trim_unreachable] Visited state 1
[DEBUG DFA.trim_unreachable] Removing unreachable state 2
[DEBUG DFA.trim_unreachable] Removing unreachable state 4
[DEBUG DFA.trim_unreachable] Removing unreachable state 5
[DEBUG DFA.trim_unreachable] Removing unreachable state 7
[DEBUG DFA.trim_unreachable] Removing unreachable state 8
[DEBUG DFA.trim_unreachable] Removing unreachable state 9
[DEBUG DFA.trim_unreachable] Removing unreachable state 11
[DEBUG DFA.trim_unreachable] Final states: {0, 1, 3, 6, 10}
[DEBUG DFA.intersection] Final intersection DFA: states={0, 1, 3, 6, 10}, transitions={0: {'a': 0, 'b': 1}, 1: {'a': 0, 'b': 0}, 3: {'a': 6, 'b': 10}, 6: {'a': 6, 'b': 10}, 10: {'a': 0, 'b': 0}}
[DEBUG DFA.is_equivalent] ¬Self ∩ Other DFA: states={0, 1, 3, 6, 10}, final={1, 4, 7}
[DEBUG DFA.union] Product states: [(0, 0), (0, 1), (0, 3), (0, 6), (0, 10), (1, 0), (1, 1), (1, 3), (1, 6), (1, 10), (3, 0), (3, 1), (3, 3), (3, 6), (3, 10), (6, 0), (6, 1), (6, 3), (6, 6), (6, 10), (10, 0), (10, 1), (10, 3), (10, 6), (10, 10)]
[DEBUG DFA.union] Union start state: 12
[DEBUG DFA.union] Union final states: {1, 6, 11, 16, 21}
[DEBUG DFA.union] Transition 0 --a--> 0 (from 0,0)
[DEBUG DFA.union] Transition 0 --b--> 6 (from 0,0)
[DEBUG DFA.union] Transition 1 --a--> 0 (from 0,1)
[DEBUG DFA.union] Transition 1 --b--> 5 (from 0,1)
[DEBUG DFA.union] Transition 2 --a--> 3 (from 0,3)
[DEBUG DFA.union] Transition 2 --b--> 9 (from 0,3)
[DEBUG DFA.union] Transition 3 --a--> 3 (from 0,6)
[DEBUG DFA.union] Transition 3 --b--> 9 (from 0,6)
[DEBUG DFA.union] Transition 4 --a--> 0 (from 0,10)
[DEBUG DFA.union] Transition 4 --b--> 5 (from 0,10)
[DEBUG DFA.union] Transition 5 --a--> 0 (from 1,0)
[DEBUG DFA.union] Transition 5 --b--> 1 (from 1,0)
[DEBUG DFA.union] Transition 6 --a--> 0 (from 1,1)
[DEBUG DFA.union] Transition 6 --b--> 0 (from 1,1)
[DEBUG DFA.union] Transition 7 --a--> 3 (from 1,3)
[DEBUG DFA.union] Transition 7 --b--> 4 (from 1,3)
[DEBUG DFA.union] Transition 8 --a--> 3 (from 1,6)
[DEBUG DFA.union] Transition 8 --b--> 4 (from 1,6)
[DEBUG DFA.union] Transition 9 --a--> 0 (from 1,10)
[DEBUG DFA.union] Transition 9 --b--> 0 (from 1,10)
[DEBUG DFA.union] Transition 10 --a--> 15 (from 3,0)
[DEBUG DFA.union] Transition 10 --b--> 21 (from 3,0)
[DEBUG DFA.union] Transition 11 --a--> 15 (from 3,1)
[DEBUG DFA.union] Transition 11 --b--> 20 (from 3,1)
[DEBUG DFA.union] Transition 12 --a--> 18 (from 3,3)
[DEBUG DFA.union] Transition 12 --b--> 24 (from 3,3)
[DEBUG DFA.union] Transition 13 --a--> 18 (from 3,6)
[DEBUG DFA.union] Transition 13 --b--> 24 (from 3,6)
[DEBUG DFA.union] Transition 14 --a--> 15 (from 3,10)
[DEBUG DFA.union] Transition 14 --b--> 20 (from 3,10)
[DEBUG DFA.union] Transition 15 --a--> 15 (from 6,0)
[DEBUG DFA.union] Transition 15 --b--> 21 (from 6,0)
[DEBUG DFA.union] Transition 16 --a--> 15 (from 6,1)
[DEBUG DFA.union] Transition 16 --b--> 20 (from 6,1)
[DEBUG DFA.union] Transition 17 --a--> 18 (from 6,3)
[DEBUG DFA.union] Transition 17 --b--> 24 (from 6,3)
[DEBUG DFA.union] Transition 18 --a--> 18 (from 6,6)
[DEBUG DFA.union] Transition 18 --b--> 24 (from 6,6)
[DEBUG DFA.union] Transition 19 --a--> 15 (from 6,10)
[DEBUG DFA.union] Transition 19 --b--> 20 (from 6,10)
[DEBUG DFA.union] Transition 20 --a--> 0 (from 10,0)
[DEBUG DFA.union] Transition 20 --b--> 1 (from 10,0)
[DEBUG DFA.union] Transition 21 --a--> 0 (from 10,1)
[DEBUG DFA.union] Transition 21 --b--> 0 (from 10,1)
[DEBUG DFA.union] Transition 22 --a--> 3 (from 10,3)
[DEBUG DFA.union] Transition 22 --b--> 4 (from 10,3)
[DEBUG DFA.union] Transition 23 --a--> 3 (from 10,6)
[DEBUG DFA.union] Transition 23 --b--> 4 (from 10,6)
[DEBUG DFA.union] Transition 24 --a--> 0 (from 10,10)
[DEBUG DFA.union] Transition 24 --b--> 0 (from 10,10)
[DEBUG DFA.trim_unreachable] Starting to trim unreachable states
[DEBUG DFA.trim_unreachable] Starting BFS from state 12
[DEBUG DFA.trim_unreachable] Visited state 12
[DEBUG DFA.trim_unreachable] Queued state 18
[DEBUG DFA.trim_unreachable] Queued state 24
[DEBUG DFA.trim_unreachable] Visited state 18
[DEBUG DFA.trim_unreachable] Queued state 24
[DEBUG DFA.trim_unreachable] Visited state 24
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Visited state 0
[DEBUG DFA.trim_unreachable] Queued state 6
[DEBUG DFA.trim_unreachable] Visited state 6
[DEBUG DFA.trim_unreachable] Removing unreachable state 1
[DEBUG DFA.trim_unreachable] Removing unreachable state 2
[DEBUG DFA.trim_unreachable] Removing unreachable state 3
[DEBUG DFA.trim_unreachable] Removing unreachable state 4
[DEBUG DFA.trim_unreachable] Removing unreachable state 5
[DEBUG DFA.trim_unreachable] Removing unreachable state 7
[DEBUG DFA.trim_unreachable] Removing unreachable state 8
[DEBUG DFA.trim_unreachable] Removing unreachable state 9
[DEBUG DFA.trim_unreachable] Removing unreachable state 10
[DEBUG DFA.trim_unreachable] Removing unreachable state 11
[DEBUG DFA.trim_unreachable] Removing unreachable state 13
[DEBUG DFA.trim_unreachable] Removing unreachable state 14
[DEBUG DFA.trim_unreachable] Removing unreachable state 15
[DEBUG DFA.trim_unreachable] Removing unreachable state 16
[DEBUG DFA.trim_unreachable] Removing unreachable state 17
[DEBUG DFA.trim_unreachable] Removing unreachable state 19
[DEBUG DFA.trim_unreachable] Removing unreachable state 20
[DEBUG DFA.trim_unreachable] Removing unreachable state 21
[DEBUG DFA.trim_unreachable] Removing unreachable state 22
[DEBUG DFA.trim_unreachable] Removing unreachable state 23
[DEBUG DFA.trim_unreachable] Final states: {0, 6, 12, 18, 24}
[DEBUG DFA.union] Final union DFA: states={0, 6, 12, 18, 24}, transitions={0: {'a': 0, 'b': 6}, 6: {'a': 0, 'b': 0}, 12: {'a': 18, 'b': 24}, 18: {'a': 18, 'b': 24}, 24: {'a': 0, 'b': 0}}
[DEBUG DFA.is_equivalent] Symmetric difference: states={0, 6, 12, 18, 24}, final={1, 6, 11, 16, 21}
[DEBUG DFA.trim_unreachable] Starting to trim unreachable states
[DEBUG DFA.trim_unreachable] Starting BFS from state 12
[DEBUG DFA.trim_unreachable] Visited state 12
[DEBUG DFA.trim_unreachable] Queued state 18
[DEBUG DFA.trim_unreachable] Queued state 24
[DEBUG DFA.trim_unreachable] Visited state 18
[DEBUG DFA.trim_unreachable] Queued state 24
[DEBUG DFA.trim_unreachable] Visited state 24
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Visited state 0
[DEBUG DFA.trim_unreachable] Queued state 6
[DEBUG DFA.trim_unreachable] Visited state 6
[DEBUG DFA.trim_unreachable] Final states: {0, 6, 12, 18, 24}
[DEBUG DFA.is_equivalent] After trimming: states={0, 6, 12, 18, 24}
[DEBUG DFA.is_empty] Queuing transition 12 --a--> 18
[DEBUG DFA.is_empty] Queuing transition 12 --b--> 24
[DEBUG DFA.is_empty] Queuing transition 18 --a--> 18
[DEBUG DFA.is_empty] Queuing transition 18 --b--> 24
[DEBUG DFA.is_empty] Queuing transition 24 --a--> 0
[DEBUG DFA.is_empty] Queuing transition 24 --b--> 0
[DEBUG DFA.is_empty] Queuing transition 0 --a--> 0
[DEBUG DFA.is_empty] Queuing transition 0 --b--> 6
[DEBUG DFA.is_equivalent] Equivalence result: (False, 'bab')

Iteration 1, Counterexample: 'bab'
[DEBUG Refiner.decompose] Decomposing counterexample string: 'bab'
[DEBUG Refiner.binary_search] Starting binary search: low=0, high=3
[DEBUG Refiner.binary_search] Checking mid=1
[DEBUG Refiner.decompose.alpha] Checking alpha for i=1
[DEBUG Refiner.decompose.prefix_mapping] Mapping prefix for s='bab', i=1
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Hypothesis.run] Final state: q1
[DEBUG Refiner.decompose.prefix_mapping] Prefix state=q1, result='bab'
[DEBUG DFA.evaluate] Evaluating input string 'bab'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Processing character 'a' at position 1, current state: 3
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Processing character 'b' at position 2, current state: 0
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Evaluation result: False, final state: 0
[DEBUG DFA.evaluate] Evaluating input string 'bab'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Processing character 'a' at position 1, current state: 3
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Processing character 'b' at position 2, current state: 0
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Evaluation result: False, final state: 0
[DEBUG Refiner.decompose.alpha] Mapped string='bab', result=True
[DEBUG Refiner.binary_search] alpha(1) is True, updating low=2
[DEBUG Refiner.binary_search] Checking mid=2
[DEBUG Refiner.decompose.alpha] Checking alpha for i=2
[DEBUG Refiner.decompose.prefix_mapping] Mapping prefix for s='bab', i=2
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Transition.target_state] Getting target state for aseq='ba': q0
[DEBUG Transition.target_state] Getting target state for aseq='ba': q0
[DEBUG Hypothesis.run] Final state: q0
[DEBUG Refiner.decompose.prefix_mapping] Prefix state=q0, result='b'
[DEBUG DFA.evaluate] Evaluating input string 'b'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Evaluation result: True, final state: 3
[DEBUG DFA.evaluate] Evaluating input string 'bab'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Processing character 'a' at position 1, current state: 3
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Processing character 'b' at position 2, current state: 0
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Evaluation result: False, final state: 0
[DEBUG Refiner.decompose.alpha] Mapped string='b', result=False
[DEBUG Refiner.binary_search] alpha(2) is False, updating ans=2
[DEBUG Refiner.binary_search] Binary search result: 1
[DEBUG Refiner.decompose] Binary search returned index i=1
[DEBUG Refiner.decompose] Decomposed: u='b', a='a', v='b'
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Hypothesis.run] Final state: q1
[DEBUG Transition.target_state] Getting target state for aseq='ba': q0
[DEBUG Node.make_leaf] Creating new leaf node
[DEBUG Node.__init__] Node created: temporary=False, depth=0
[DEBUG Node.make_leaf] Creating new leaf node
[DEBUG Node.__init__] Node created: temporary=False, depth=0
[DEBUG Node.block.setter] Setting block of Node<None> to Node<~b>
[DEBUG Node.block.setter] Setting block of Node<None> to Node<~b>
[DEBUG Node.split_leaf] Created children: (Node<None>, Node<None>)
[DEBUG DFA.evaluate] Evaluating input string 'b'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Evaluation result: True, final state: 3
[DEBUG Transition.is_tree] Transition ba is_tree: False
[DEBUG State.__init__] State created: id=2, aseq='ba'
[DEBUG Transition.__init__] Transition created: incoming_non_tree={<__main__.Transition object at 0x112070770>}
[DEBUG Transition.__init__] Transition created: incoming_non_tree={<__main__.Transition object at 0x10e6be450>, <__main__.Transition object at 0x112070770>}
[DEBUG Hypothesis.add_state] State added: q2, transitions={'a': <__main__.Transition object at 0x112070770>, 'b': <__main__.Transition object at 0x10e6be450>}
[DEBUG Transition.target_state.setter] Setting target state for aseq='ba' to q2
[DEBUG Node.parent.setter] Updated depth=2, block=Node<~b>
[DEBUG Node.parent.setter] Updated depth=2, block=Node<~b>
[DEBUG Node.parent_value] Checking parent value for node Node<None>
[DEBUG Node.parent.setter] Updated depth=2, block=Node<~b>
[DEBUG Node.parent.setter] Updated depth=2, block=Node<~b>
[DEBUG Node.parent_value] Node is left child, returning False
[DEBUG Node.parent.setter] Updated depth=2, block=Node<~b>
[DEBUG Node.parent.setter] Updated depth=1, block=Node<~b>
[DEBUG Node.parent.setter] Updated depth=1, block=Node<~b>
[DEBUG Node.parent_value] Checking parent value for node Node<~b>
[DEBUG Node.parent.setter] Updated depth=1, block=Node<~b>
[DEBUG Node.parent.setter] Updated depth=1, block=Node<~b>
[DEBUG Node.parent_value] Node is left child, returning False
[DEBUG Node.parent.setter] Updated depth=1, block=Node<~b>
[DEBUG Node.parent.setter] Updated depth=0, block=None
[DEBUG Node.state.setter] Linking state q2 to node Node<None>
[DEBUG Node.state.setter] Updated block=Node<~b>
[DEBUG Node.link] Linked: node.state=q2, state.node=Node<q2>
[DEBUG Node.state.setter] Linking state q0 to node Node<None>
[DEBUG Node.state.setter] Updated block=Node<~b>
[DEBUG Node.link] Linked: node.state=q0, state.node=Node<q0>

--- Discrimination Tree after State Split ---
[DEBUG visualize_dtree] Starting visualization of discrimination tree
[DEBUG visualize_dtree] Displaying visualization

[DEBUG Transition.target_state] Getting target state for aseq='a': None
[DEBUG DFA.evaluate] Evaluating input string 'a'
[DEBUG DFA.evaluate] Processing character 'a' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 2
[DEBUG DFA.evaluate] Evaluation result: False, final state: 2
[DEBUG Node.sift] Query 'a' -> 0, moving to child Node<~b>
[DEBUG DFA.evaluate] Evaluating input string 'ab'
[DEBUG DFA.evaluate] Processing character 'a' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 2
[DEBUG DFA.evaluate] Processing character 'b' at position 1, current state: 2
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Evaluation result: True, final state: 3
[DEBUG Node.sift] Query 'ab' -> 1, moving to child Node<q0>
[DEBUG Transition.is_tree] Transition a is_tree: False
[DEBUG Transition.target_node.setter] Updated target_node=Node<q0>, incoming_non_tree={<__main__.Transition object at 0x10e4af8c0>}
[DEBUG Transition.target_state] Getting target state for aseq='ba': q2
[DEBUG Transition.target_state] Getting target state for aseq='bb': None
[DEBUG DFA.evaluate] Evaluating input string 'bb'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Processing character 'b' at position 1, current state: 3
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Evaluation result: False, final state: 0
[DEBUG Node.sift] Query 'bb' -> 0, moving to child Node<~b>
[DEBUG DFA.evaluate] Evaluating input string 'bbb'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Processing character 'b' at position 1, current state: 3
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Processing character 'b' at position 2, current state: 0
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Evaluation result: False, final state: 0
[DEBUG Node.sift] Query 'bbb' -> 0, moving to child Node<q2>
[DEBUG Transition.is_tree] Transition bb is_tree: False
[DEBUG Transition.target_node.setter] Updated target_node=Node<q2>, incoming_non_tree={<__main__.Transition object at 0x1120703e0>}
[DEBUG Transition.target_state] Getting target state for aseq='baa': None
[DEBUG DFA.evaluate] Evaluating input string 'baa'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Processing character 'a' at position 1, current state: 3
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Processing character 'a' at position 2, current state: 0
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Evaluation result: False, final state: 0
[DEBUG Node.sift] Query 'baa' -> 0, moving to child Node<~b>
[DEBUG DFA.evaluate] Evaluating input string 'baab'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Processing character 'a' at position 1, current state: 3
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Processing character 'a' at position 2, current state: 0
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Processing character 'b' at position 3, current state: 0
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Evaluation result: False, final state: 0
[DEBUG Node.sift] Query 'baab' -> 0, moving to child Node<q2>
[DEBUG Transition.is_tree] Transition baa is_tree: False
[DEBUG Transition.target_node.setter] Updated target_node=Node<q2>, incoming_non_tree={<__main__.Transition object at 0x1120703e0>, <__main__.Transition object at 0x112070770>}
[DEBUG Transition.target_state] Getting target state for aseq='bab': None
[DEBUG DFA.evaluate] Evaluating input string 'bab'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Processing character 'a' at position 1, current state: 3
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Processing character 'b' at position 2, current state: 0
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Evaluation result: False, final state: 0
[DEBUG Node.sift] Query 'bab' -> 0, moving to child Node<~b>
[DEBUG DFA.evaluate] Evaluating input string 'babb'
[DEBUG DFA.evaluate] Processing character 'b' at position 0, current state: 1
[DEBUG DFA.evaluate] Moved to state 3
[DEBUG DFA.evaluate] Processing character 'a' at position 1, current state: 3
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Processing character 'b' at position 2, current state: 0
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Processing character 'b' at position 3, current state: 0
[DEBUG DFA.evaluate] Moved to state 0
[DEBUG DFA.evaluate] Evaluation result: False, final state: 0
[DEBUG Node.sift] Query 'babb' -> 0, moving to child Node<q2>
[DEBUG Transition.is_tree] Transition bab is_tree: False
[DEBUG Transition.target_node.setter] Updated target_node=Node<q2>, incoming_non_tree={<__main__.Transition object at 0x10e6be450>, <__main__.Transition object at 0x1120703e0>, <__main__.Transition object at 0x112070770>}

--- Discrimination Tree after Closing Hypothesis ---
[DEBUG visualize_dtree] Starting visualization of discrimination tree
[DEBUG visualize_dtree] Displaying visualization

[DEBUG Hypothesis.to_dfa] Converting hypothesis to DFA
[DEBUG Transition.target_state] Getting target state for aseq='baa': q2
[DEBUG Transition.target_state] Getting target state for aseq='baa': q2
[DEBUG Transition.target_state] Getting target state for aseq='baa': q2
[DEBUG Hypothesis.to_dfa] Added DFA transition 2 --a--> 2
[DEBUG Transition.target_state] Getting target state for aseq='bab': q2
[DEBUG Transition.target_state] Getting target state for aseq='bab': q2
[DEBUG Transition.target_state] Getting target state for aseq='bab': q2
[DEBUG Hypothesis.to_dfa] Added DFA transition 2 --b--> 2
[DEBUG Transition.target_state] Getting target state for aseq='a': q0
[DEBUG Transition.target_state] Getting target state for aseq='a': q0
[DEBUG Transition.target_state] Getting target state for aseq='a': q0
[DEBUG Hypothesis.to_dfa] Added DFA transition 0 --a--> 0
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Hypothesis.to_dfa] Added DFA transition 0 --b--> 1
[DEBUG Transition.target_state] Getting target state for aseq='ba': q2
[DEBUG Transition.target_state] Getting target state for aseq='ba': q2
[DEBUG Transition.target_state] Getting target state for aseq='ba': q2
[DEBUG Hypothesis.to_dfa] Added DFA transition 1 --a--> 2
[DEBUG Transition.target_state] Getting target state for aseq='bb': q2
[DEBUG Transition.target_state] Getting target state for aseq='bb': q2
[DEBUG Transition.target_state] Getting target state for aseq='bb': q2
[DEBUG Hypothesis.to_dfa] Added DFA transition 1 --b--> 2
[DEBUG DFA.close_with_sink] Adding sink state 4 for alphabet ['a', 'b']
[DEBUG DFA.add_state] Adding state 4 with transitions {'a': 4, 'b': 4}
[DEBUG DFA.close_with_sink] Transitions after adding sink: {2: {'a': 2, 'b': 2}, 0: {'a': 0, 'b': 1}, 1: {'a': 2, 'b': 2}, 4: {'a': 4, 'b': 4}}
[DEBUG Hypothesis.to_dfa] DFA after sink: transitions={2: {'a': 2, 'b': 2}, 0: {'a': 0, 'b': 1}, 1: {'a': 2, 'b': 2}, 4: {'a': 4, 'b': 4}}
[DEBUG DFA.is_equivalent] Checking equivalence with another DFA
[DEBUG DFA.complement] Creating complement DFA
[DEBUG DFA.complement] Complement final states: {0, 2, 4}
[DEBUG DFA.intersection] Product states: [(0, 0), (0, 1), (0, 2), (0, 4), (1, 0), (1, 1), (1, 2), (1, 4), (2, 0), (2, 1), (2, 2), (2, 4), (3, 0), (3, 1), (3, 2), (3, 4)]
[DEBUG DFA.intersection] Intersection start state: 4
[DEBUG DFA.intersection] Intersection final states: {12, 14, 15}
[DEBUG DFA.intersection] Transition 0 --a--> 0 (from 0,0)
[DEBUG DFA.intersection] Transition 0 --b--> 1 (from 0,0)
[DEBUG DFA.intersection] Transition 1 --a--> 2 (from 0,1)
[DEBUG DFA.intersection] Transition 1 --b--> 2 (from 0,1)
[DEBUG DFA.intersection] Transition 2 --a--> 2 (from 0,2)
[DEBUG DFA.intersection] Transition 2 --b--> 2 (from 0,2)
[DEBUG DFA.intersection] Transition 3 --a--> 3 (from 0,4)
[DEBUG DFA.intersection] Transition 3 --b--> 3 (from 0,4)
[DEBUG DFA.intersection] Transition 4 --a--> 8 (from 1,0)
[DEBUG DFA.intersection] Transition 4 --b--> 13 (from 1,0)
[DEBUG DFA.intersection] Transition 5 --a--> 10 (from 1,1)
[DEBUG DFA.intersection] Transition 5 --b--> 14 (from 1,1)
[DEBUG DFA.intersection] Transition 6 --a--> 10 (from 1,2)
[DEBUG DFA.intersection] Transition 6 --b--> 14 (from 1,2)
[DEBUG DFA.intersection] Transition 7 --a--> 11 (from 1,4)
[DEBUG DFA.intersection] Transition 7 --b--> 15 (from 1,4)
[DEBUG DFA.intersection] Transition 8 --a--> 8 (from 2,0)
[DEBUG DFA.intersection] Transition 8 --b--> 13 (from 2,0)
[DEBUG DFA.intersection] Transition 9 --a--> 10 (from 2,1)
[DEBUG DFA.intersection] Transition 9 --b--> 14 (from 2,1)
[DEBUG DFA.intersection] Transition 10 --a--> 10 (from 2,2)
[DEBUG DFA.intersection] Transition 10 --b--> 14 (from 2,2)
[DEBUG DFA.intersection] Transition 11 --a--> 11 (from 2,4)
[DEBUG DFA.intersection] Transition 11 --b--> 15 (from 2,4)
[DEBUG DFA.intersection] Transition 12 --a--> 0 (from 3,0)
[DEBUG DFA.intersection] Transition 12 --b--> 1 (from 3,0)
[DEBUG DFA.intersection] Transition 13 --a--> 2 (from 3,1)
[DEBUG DFA.intersection] Transition 13 --b--> 2 (from 3,1)
[DEBUG DFA.intersection] Transition 14 --a--> 2 (from 3,2)
[DEBUG DFA.intersection] Transition 14 --b--> 2 (from 3,2)
[DEBUG DFA.intersection] Transition 15 --a--> 3 (from 3,4)
[DEBUG DFA.intersection] Transition 15 --b--> 3 (from 3,4)
[DEBUG DFA.trim_unreachable] Starting to trim unreachable states
[DEBUG DFA.trim_unreachable] Starting BFS from state 4
[DEBUG DFA.trim_unreachable] Visited state 4
[DEBUG DFA.trim_unreachable] Queued state 8
[DEBUG DFA.trim_unreachable] Queued state 13
[DEBUG DFA.trim_unreachable] Visited state 8
[DEBUG DFA.trim_unreachable] Queued state 13
[DEBUG DFA.trim_unreachable] Visited state 13
[DEBUG DFA.trim_unreachable] Queued state 2
[DEBUG DFA.trim_unreachable] Queued state 2
[DEBUG DFA.trim_unreachable] Visited state 2
[DEBUG DFA.trim_unreachable] Removing unreachable state 0
[DEBUG DFA.trim_unreachable] Removing unreachable state 1
[DEBUG DFA.trim_unreachable] Removing unreachable state 3
[DEBUG DFA.trim_unreachable] Removing unreachable state 5
[DEBUG DFA.trim_unreachable] Removing unreachable state 6
[DEBUG DFA.trim_unreachable] Removing unreachable state 7
[DEBUG DFA.trim_unreachable] Removing unreachable state 9
[DEBUG DFA.trim_unreachable] Removing unreachable state 10
[DEBUG DFA.trim_unreachable] Removing unreachable state 11
[DEBUG DFA.trim_unreachable] Removing unreachable state 12
[DEBUG DFA.trim_unreachable] Removing unreachable state 14
[DEBUG DFA.trim_unreachable] Removing unreachable state 15
[DEBUG DFA.trim_unreachable] Final states: {2, 4, 8, 13}
[DEBUG DFA.intersection] Final intersection DFA: states={2, 4, 8, 13}, transitions={2: {'a': 2, 'b': 2}, 4: {'a': 8, 'b': 13}, 8: {'a': 8, 'b': 13}, 13: {'a': 2, 'b': 2}}
[DEBUG DFA.is_equivalent] Self ∩ ¬Other DFA: states={2, 4, 8, 13}, final={12, 14, 15}
[DEBUG DFA.complement] Creating complement DFA
[DEBUG DFA.complement] Complement final states: {0, 1, 2}
[DEBUG DFA.intersection] Product states: [(0, 0), (0, 1), (0, 2), (0, 4), (1, 0), (1, 1), (1, 2), (1, 4), (2, 0), (2, 1), (2, 2), (2, 4), (3, 0), (3, 1), (3, 2), (3, 4)]
[DEBUG DFA.intersection] Intersection start state: 4
[DEBUG DFA.intersection] Intersection final states: {1, 5, 9}
[DEBUG DFA.intersection] Transition 0 --a--> 0 (from 0,0)
[DEBUG DFA.intersection] Transition 0 --b--> 1 (from 0,0)
[DEBUG DFA.intersection] Transition 1 --a--> 2 (from 0,1)
[DEBUG DFA.intersection] Transition 1 --b--> 2 (from 0,1)
[DEBUG DFA.intersection] Transition 2 --a--> 2 (from 0,2)
[DEBUG DFA.intersection] Transition 2 --b--> 2 (from 0,2)
[DEBUG DFA.intersection] Transition 3 --a--> 3 (from 0,4)
[DEBUG DFA.intersection] Transition 3 --b--> 3 (from 0,4)
[DEBUG DFA.intersection] Transition 4 --a--> 8 (from 1,0)
[DEBUG DFA.intersection] Transition 4 --b--> 13 (from 1,0)
[DEBUG DFA.intersection] Transition 5 --a--> 10 (from 1,1)
[DEBUG DFA.intersection] Transition 5 --b--> 14 (from 1,1)
[DEBUG DFA.intersection] Transition 6 --a--> 10 (from 1,2)
[DEBUG DFA.intersection] Transition 6 --b--> 14 (from 1,2)
[DEBUG DFA.intersection] Transition 7 --a--> 11 (from 1,4)
[DEBUG DFA.intersection] Transition 7 --b--> 15 (from 1,4)
[DEBUG DFA.intersection] Transition 8 --a--> 8 (from 2,0)
[DEBUG DFA.intersection] Transition 8 --b--> 13 (from 2,0)
[DEBUG DFA.intersection] Transition 9 --a--> 10 (from 2,1)
[DEBUG DFA.intersection] Transition 9 --b--> 14 (from 2,1)
[DEBUG DFA.intersection] Transition 10 --a--> 10 (from 2,2)
[DEBUG DFA.intersection] Transition 10 --b--> 14 (from 2,2)
[DEBUG DFA.intersection] Transition 11 --a--> 11 (from 2,4)
[DEBUG DFA.intersection] Transition 11 --b--> 15 (from 2,4)
[DEBUG DFA.intersection] Transition 12 --a--> 0 (from 3,0)
[DEBUG DFA.intersection] Transition 12 --b--> 1 (from 3,0)
[DEBUG DFA.intersection] Transition 13 --a--> 2 (from 3,1)
[DEBUG DFA.intersection] Transition 13 --b--> 2 (from 3,1)
[DEBUG DFA.intersection] Transition 14 --a--> 2 (from 3,2)
[DEBUG DFA.intersection] Transition 14 --b--> 2 (from 3,2)
[DEBUG DFA.intersection] Transition 15 --a--> 3 (from 3,4)
[DEBUG DFA.intersection] Transition 15 --b--> 3 (from 3,4)
[DEBUG DFA.trim_unreachable] Starting to trim unreachable states
[DEBUG DFA.trim_unreachable] Starting BFS from state 4
[DEBUG DFA.trim_unreachable] Visited state 4
[DEBUG DFA.trim_unreachable] Queued state 8
[DEBUG DFA.trim_unreachable] Queued state 13
[DEBUG DFA.trim_unreachable] Visited state 8
[DEBUG DFA.trim_unreachable] Queued state 13
[DEBUG DFA.trim_unreachable] Visited state 13
[DEBUG DFA.trim_unreachable] Queued state 2
[DEBUG DFA.trim_unreachable] Queued state 2
[DEBUG DFA.trim_unreachable] Visited state 2
[DEBUG DFA.trim_unreachable] Removing unreachable state 0
[DEBUG DFA.trim_unreachable] Removing unreachable state 1
[DEBUG DFA.trim_unreachable] Removing unreachable state 3
[DEBUG DFA.trim_unreachable] Removing unreachable state 5
[DEBUG DFA.trim_unreachable] Removing unreachable state 6
[DEBUG DFA.trim_unreachable] Removing unreachable state 7
[DEBUG DFA.trim_unreachable] Removing unreachable state 9
[DEBUG DFA.trim_unreachable] Removing unreachable state 10
[DEBUG DFA.trim_unreachable] Removing unreachable state 11
[DEBUG DFA.trim_unreachable] Removing unreachable state 12
[DEBUG DFA.trim_unreachable] Removing unreachable state 14
[DEBUG DFA.trim_unreachable] Removing unreachable state 15
[DEBUG DFA.trim_unreachable] Final states: {2, 4, 8, 13}
[DEBUG DFA.intersection] Final intersection DFA: states={2, 4, 8, 13}, transitions={2: {'a': 2, 'b': 2}, 4: {'a': 8, 'b': 13}, 8: {'a': 8, 'b': 13}, 13: {'a': 2, 'b': 2}}
[DEBUG DFA.is_equivalent] ¬Self ∩ Other DFA: states={2, 4, 8, 13}, final={1, 5, 9}
[DEBUG DFA.union] Product states: [(2, 2), (2, 4), (2, 8), (2, 13), (4, 2), (4, 4), (4, 8), (4, 13), (8, 2), (8, 4), (8, 8), (8, 13), (13, 2), (13, 4), (13, 8), (13, 13)]
[DEBUG DFA.union] Union start state: 5
[DEBUG DFA.union] Union final states: set()
[DEBUG DFA.union] Transition 0 --a--> 0 (from 2,2)
[DEBUG DFA.union] Transition 0 --b--> 0 (from 2,2)
[DEBUG DFA.union] Transition 1 --a--> 2 (from 2,4)
[DEBUG DFA.union] Transition 1 --b--> 3 (from 2,4)
[DEBUG DFA.union] Transition 2 --a--> 2 (from 2,8)
[DEBUG DFA.union] Transition 2 --b--> 3 (from 2,8)
[DEBUG DFA.union] Transition 3 --a--> 0 (from 2,13)
[DEBUG DFA.union] Transition 3 --b--> 0 (from 2,13)
[DEBUG DFA.union] Transition 4 --a--> 8 (from 4,2)
[DEBUG DFA.union] Transition 4 --b--> 12 (from 4,2)
[DEBUG DFA.union] Transition 5 --a--> 10 (from 4,4)
[DEBUG DFA.union] Transition 5 --b--> 15 (from 4,4)
[DEBUG DFA.union] Transition 6 --a--> 10 (from 4,8)
[DEBUG DFA.union] Transition 6 --b--> 15 (from 4,8)
[DEBUG DFA.union] Transition 7 --a--> 8 (from 4,13)
[DEBUG DFA.union] Transition 7 --b--> 12 (from 4,13)
[DEBUG DFA.union] Transition 8 --a--> 8 (from 8,2)
[DEBUG DFA.union] Transition 8 --b--> 12 (from 8,2)
[DEBUG DFA.union] Transition 9 --a--> 10 (from 8,4)
[DEBUG DFA.union] Transition 9 --b--> 15 (from 8,4)
[DEBUG DFA.union] Transition 10 --a--> 10 (from 8,8)
[DEBUG DFA.union] Transition 10 --b--> 15 (from 8,8)
[DEBUG DFA.union] Transition 11 --a--> 8 (from 8,13)
[DEBUG DFA.union] Transition 11 --b--> 12 (from 8,13)
[DEBUG DFA.union] Transition 12 --a--> 0 (from 13,2)
[DEBUG DFA.union] Transition 12 --b--> 0 (from 13,2)
[DEBUG DFA.union] Transition 13 --a--> 2 (from 13,4)
[DEBUG DFA.union] Transition 13 --b--> 3 (from 13,4)
[DEBUG DFA.union] Transition 14 --a--> 2 (from 13,8)
[DEBUG DFA.union] Transition 14 --b--> 3 (from 13,8)
[DEBUG DFA.union] Transition 15 --a--> 0 (from 13,13)
[DEBUG DFA.union] Transition 15 --b--> 0 (from 13,13)
[DEBUG DFA.trim_unreachable] Starting to trim unreachable states
[DEBUG DFA.trim_unreachable] Starting BFS from state 5
[DEBUG DFA.trim_unreachable] Visited state 5
[DEBUG DFA.trim_unreachable] Queued state 10
[DEBUG DFA.trim_unreachable] Queued state 15
[DEBUG DFA.trim_unreachable] Visited state 10
[DEBUG DFA.trim_unreachable] Queued state 15
[DEBUG DFA.trim_unreachable] Visited state 15
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Visited state 0
[DEBUG DFA.trim_unreachable] Removing unreachable state 1
[DEBUG DFA.trim_unreachable] Removing unreachable state 2
[DEBUG DFA.trim_unreachable] Removing unreachable state 3
[DEBUG DFA.trim_unreachable] Removing unreachable state 4
[DEBUG DFA.trim_unreachable] Removing unreachable state 6
[DEBUG DFA.trim_unreachable] Removing unreachable state 7
[DEBUG DFA.trim_unreachable] Removing unreachable state 8
[DEBUG DFA.trim_unreachable] Removing unreachable state 9
[DEBUG DFA.trim_unreachable] Removing unreachable state 11
[DEBUG DFA.trim_unreachable] Removing unreachable state 12
[DEBUG DFA.trim_unreachable] Removing unreachable state 13
[DEBUG DFA.trim_unreachable] Removing unreachable state 14
[DEBUG DFA.trim_unreachable] Final states: {0, 5, 10, 15}
[DEBUG DFA.union] Final union DFA: states={0, 5, 10, 15}, transitions={0: {'a': 0, 'b': 0}, 5: {'a': 10, 'b': 15}, 10: {'a': 10, 'b': 15}, 15: {'a': 0, 'b': 0}}
[DEBUG DFA.is_equivalent] Symmetric difference: states={0, 5, 10, 15}, final=set()
[DEBUG DFA.trim_unreachable] Starting to trim unreachable states
[DEBUG DFA.trim_unreachable] Starting BFS from state 5
[DEBUG DFA.trim_unreachable] Visited state 5
[DEBUG DFA.trim_unreachable] Queued state 10
[DEBUG DFA.trim_unreachable] Queued state 15
[DEBUG DFA.trim_unreachable] Visited state 10
[DEBUG DFA.trim_unreachable] Queued state 15
[DEBUG DFA.trim_unreachable] Visited state 15
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Visited state 0
[DEBUG DFA.trim_unreachable] Final states: {0, 5, 10, 15}
[DEBUG DFA.is_equivalent] After trimming: states={0, 5, 10, 15}
[DEBUG DFA.is_empty] Queuing transition 5 --a--> 10
[DEBUG DFA.is_empty] Queuing transition 5 --b--> 15
[DEBUG DFA.is_empty] Queuing transition 10 --a--> 10
[DEBUG DFA.is_empty] Queuing transition 10 --b--> 15
[DEBUG DFA.is_empty] Queuing transition 15 --a--> 0
[DEBUG DFA.is_empty] Queuing transition 15 --b--> 0
[DEBUG DFA.is_empty] Queuing transition 0 --a--> 0
[DEBUG DFA.is_empty] Queuing transition 0 --b--> 0
[DEBUG DFA.is_empty] No final states reached, DFA is empty
[DEBUG DFA.is_equivalent] Equivalence result: (True, None)
Learning complete after 1 iterations.

--- Final Hypothesis ---
Initial state: q0
Final states: { q1 }
State: q0 (aseq = '')
[DEBUG Transition.is_tree] Transition a is_tree: False
[DEBUG Transition.target_state] Getting target state for aseq='a': q0
	->a-> q0
[DEBUG Transition.is_tree] Transition b is_tree: True
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
	=>b=> q1
State: q1 (aseq = 'b')
[DEBUG Transition.is_tree] Transition ba is_tree: True
[DEBUG Transition.target_state] Getting target state for aseq='ba': q2
	=>a=> q2
[DEBUG Transition.is_tree] Transition bb is_tree: False
[DEBUG Transition.target_state] Getting target state for aseq='bb': q2
	->b-> q2
State: q2 (aseq = 'ba')
[DEBUG Transition.is_tree] Transition baa is_tree: False
[DEBUG Transition.target_state] Getting target state for aseq='baa': q2
	->a-> q2
[DEBUG Transition.is_tree] Transition bab is_tree: False
[DEBUG Transition.target_state] Getting target state for aseq='bab': q2
	->b-> q2

--- Final Discrimination Tree ---
[DEBUG visualize_dtree] Starting visualization of discrimination tree
[DEBUG visualize_dtree] Displaying visualization

[DEBUG Transition.target_state] Getting target state for aseq='baa': q2
[DEBUG Transition.target_state] Getting target state for aseq='bab': q2
[DEBUG Transition.target_state] Getting target state for aseq='a': q0
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Transition.target_state] Getting target state for aseq='ba': q2
[DEBUG Transition.target_state] Getting target state for aseq='bb': q2
[DEBUG] DFA visualized and saved as 'learned_dfa.png'

Learned DFA visualized as 'learned_dfa.png'
[DEBUG And.__init__] Initializing And with r1=Star, r2=Char
[DEBUG] Adding state 1 with transitions {}
[DEBUG] Adding state 1 with transitions {}
[DEBUG] Adding state 1 with transitions {}
[DEBUG Star.to_nfa] NFA created: states={0, 1, 2, 3, 4, 5}, final={0}, next_state=6
[DEBUG] Adding state 1 with transitions {}
[DEBUG And.to_nfa] NFA created: states={0, 1, 2, 3, 4, 5, 6, 7}, final={7}, next_state=8
[DEBUG NFA.remove_epsilon] Starting epsilon removal
[DEBUG NFA.remove_epsilon] Initialized new NFA: states={0, 1, 2, 3, 4, 5, 6, 7}, final={7}
[DEBUG NFA.remove_epsilon] Visiting state 0, seen={0}
[DEBUG NFA.remove_epsilon] Visiting state 2, seen={0, 2}
[DEBUG NFA.remove_epsilon] Visiting state 6, seen={0, 2, 6}
[DEBUG NFA.remove_epsilon] Visiting state 1, seen={1}
[DEBUG NFA.remove_epsilon] Visiting state 2, seen={2}
[DEBUG NFA.remove_epsilon] Visiting state 3, seen={3}
[DEBUG NFA.remove_epsilon] Visiting state 0, seen={0, 3}
[DEBUG NFA.remove_epsilon] Visiting state 2, seen={0, 2, 3}
[DEBUG NFA.remove_epsilon] Visiting state 6, seen={0, 2, 3, 6}
[DEBUG NFA.remove_epsilon] Visiting state 4, seen={4}
[DEBUG NFA.remove_epsilon] Visiting state 5, seen={5}
[DEBUG NFA.remove_epsilon] Visiting state 0, seen={0, 5}
[DEBUG NFA.remove_epsilon] Visiting state 2, seen={0, 2, 5}
[DEBUG NFA.remove_epsilon] Visiting state 6, seen={0, 2, 5, 6}
[DEBUG NFA.remove_epsilon] Visiting state 6, seen={6}
[DEBUG NFA.remove_epsilon] Visiting state 7, seen={7}
[DEBUG NFA.remove_epsilon] Marking state 7 as final
[DEBUG NFA.remove_epsilon] Before trimming: states={0, 1, 2, 3, 4, 5, 6, 7}, transitions={0: {'a': {3}, 'b': {7}}, 1: {}, 2: {'a': {3}}, 3: {'a': {3}, 'b': {7}}, 4: {'b': {5}}, 5: {'a': {3}, 'b': {7}}, 6: {'b': {7}}, 7: {}}
[DEBUG NFA.trim_unreachable] Starting BFS from state 0
[DEBUG NFA.trim_unreachable] Visited state 0
[DEBUG NFA.trim_unreachable] Visited state 3
[DEBUG NFA.trim_unreachable] Visited state 7
[DEBUG NFA.trim_unreachable] Removing unreachable state 1
[DEBUG NFA.trim_unreachable] Removing unreachable state 2
[DEBUG NFA.trim_unreachable] Removing unreachable state 4
[DEBUG NFA.trim_unreachable] Removing unreachable state 5
[DEBUG NFA.trim_unreachable] Removing unreachable state 6
[DEBUG NFA.remove_epsilon] After trimming: states={0, 3, 7}, transitions={0: {'a': {3}, 'b': {7}}, 3: {'a': {3}, 'b': {7}}, 7: {}}
[DEBUG NFA.determinise] Epsilon-free NFA: states={0, 3, 7}, final={7}
[DEBUG NFA.determinise] Subsets for DFA states: [(), (0,), (3,), (7,), (0, 3), (0, 7), (3, 7), (0, 3, 7)]
[DEBUG NFA.determinise] DFA start state: 1
[DEBUG NFA.determinise] DFA final states: {3, 5, 6, 7}
[DEBUG DFA.trim_unreachable] Starting to trim unreachable states
[DEBUG DFA.trim_unreachable] Starting BFS from state 1
[DEBUG DFA.trim_unreachable] Visited state 1
[DEBUG DFA.trim_unreachable] Queued state 2
[DEBUG DFA.trim_unreachable] Queued state 3
[DEBUG DFA.trim_unreachable] Visited state 2
[DEBUG DFA.trim_unreachable] Queued state 3
[DEBUG DFA.trim_unreachable] Visited state 3
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Visited state 0
[DEBUG DFA.trim_unreachable] Removing unreachable state 4
[DEBUG DFA.trim_unreachable] Removing unreachable state 5
[DEBUG DFA.trim_unreachable] Removing unreachable state 6
[DEBUG DFA.trim_unreachable] Removing unreachable state 7
[DEBUG DFA.trim_unreachable] Final states: {0, 1, 2, 3}
[DEBUG NFA.determinise] Final DFA: states={0, 1, 2, 3}, transitions={0: {'a': 0, 'b': 0}, 1: {'a': 2, 'b': 3}, 2: {'a': 2, 'b': 3}, 3: {'a': 0, 'b': 0}}
Target DFA visualized as 'target_dfa.png'
[DEBUG Hypothesis.to_dfa] Converting hypothesis to DFA
[DEBUG Transition.target_state] Getting target state for aseq='baa': q2
[DEBUG Transition.target_state] Getting target state for aseq='baa': q2
[DEBUG Transition.target_state] Getting target state for aseq='baa': q2
[DEBUG Hypothesis.to_dfa] Added DFA transition 2 --a--> 2
[DEBUG Transition.target_state] Getting target state for aseq='bab': q2
[DEBUG Transition.target_state] Getting target state for aseq='bab': q2
[DEBUG Transition.target_state] Getting target state for aseq='bab': q2
[DEBUG Hypothesis.to_dfa] Added DFA transition 2 --b--> 2
[DEBUG Transition.target_state] Getting target state for aseq='a': q0
[DEBUG Transition.target_state] Getting target state for aseq='a': q0
[DEBUG Transition.target_state] Getting target state for aseq='a': q0
[DEBUG Hypothesis.to_dfa] Added DFA transition 0 --a--> 0
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Transition.target_state] Getting target state for aseq='b': q1
[DEBUG Hypothesis.to_dfa] Added DFA transition 0 --b--> 1
[DEBUG Transition.target_state] Getting target state for aseq='ba': q2
[DEBUG Transition.target_state] Getting target state for aseq='ba': q2
[DEBUG Transition.target_state] Getting target state for aseq='ba': q2
[DEBUG Hypothesis.to_dfa] Added DFA transition 1 --a--> 2
[DEBUG Transition.target_state] Getting target state for aseq='bb': q2
[DEBUG Transition.target_state] Getting target state for aseq='bb': q2
[DEBUG Transition.target_state] Getting target state for aseq='bb': q2
[DEBUG Hypothesis.to_dfa] Added DFA transition 1 --b--> 2
[DEBUG DFA.close_with_sink] Adding sink state 4 for alphabet ['a', 'b']
[DEBUG DFA.add_state] Adding state 4 with transitions {'a': 4, 'b': 4}
[DEBUG DFA.close_with_sink] Transitions after adding sink: {2: {'a': 2, 'b': 2}, 0: {'a': 0, 'b': 1}, 1: {'a': 2, 'b': 2}, 4: {'a': 4, 'b': 4}}
[DEBUG Hypothesis.to_dfa] DFA after sink: transitions={2: {'a': 2, 'b': 2}, 0: {'a': 0, 'b': 1}, 1: {'a': 2, 'b': 2}, 4: {'a': 4, 'b': 4}}
[DEBUG DFA.is_equivalent] Checking equivalence with another DFA
[DEBUG DFA.complement] Creating complement DFA
[DEBUG DFA.complement] Complement final states: {0, 2, 4}
[DEBUG DFA.intersection] Product states: [(0, 0), (0, 1), (0, 2), (0, 4), (1, 0), (1, 1), (1, 2), (1, 4), (2, 0), (2, 1), (2, 2), (2, 4), (3, 0), (3, 1), (3, 2), (3, 4)]
[DEBUG DFA.intersection] Intersection start state: 4
[DEBUG DFA.intersection] Intersection final states: {12, 14, 15}
[DEBUG DFA.intersection] Transition 0 --a--> 0 (from 0,0)
[DEBUG DFA.intersection] Transition 0 --b--> 1 (from 0,0)
[DEBUG DFA.intersection] Transition 1 --a--> 2 (from 0,1)
[DEBUG DFA.intersection] Transition 1 --b--> 2 (from 0,1)
[DEBUG DFA.intersection] Transition 2 --a--> 2 (from 0,2)
[DEBUG DFA.intersection] Transition 2 --b--> 2 (from 0,2)
[DEBUG DFA.intersection] Transition 3 --a--> 3 (from 0,4)
[DEBUG DFA.intersection] Transition 3 --b--> 3 (from 0,4)
[DEBUG DFA.intersection] Transition 4 --a--> 8 (from 1,0)
[DEBUG DFA.intersection] Transition 4 --b--> 13 (from 1,0)
[DEBUG DFA.intersection] Transition 5 --a--> 10 (from 1,1)
[DEBUG DFA.intersection] Transition 5 --b--> 14 (from 1,1)
[DEBUG DFA.intersection] Transition 6 --a--> 10 (from 1,2)
[DEBUG DFA.intersection] Transition 6 --b--> 14 (from 1,2)
[DEBUG DFA.intersection] Transition 7 --a--> 11 (from 1,4)
[DEBUG DFA.intersection] Transition 7 --b--> 15 (from 1,4)
[DEBUG DFA.intersection] Transition 8 --a--> 8 (from 2,0)
[DEBUG DFA.intersection] Transition 8 --b--> 13 (from 2,0)
[DEBUG DFA.intersection] Transition 9 --a--> 10 (from 2,1)
[DEBUG DFA.intersection] Transition 9 --b--> 14 (from 2,1)
[DEBUG DFA.intersection] Transition 10 --a--> 10 (from 2,2)
[DEBUG DFA.intersection] Transition 10 --b--> 14 (from 2,2)
[DEBUG DFA.intersection] Transition 11 --a--> 11 (from 2,4)
[DEBUG DFA.intersection] Transition 11 --b--> 15 (from 2,4)
[DEBUG DFA.intersection] Transition 12 --a--> 0 (from 3,0)
[DEBUG DFA.intersection] Transition 12 --b--> 1 (from 3,0)
[DEBUG DFA.intersection] Transition 13 --a--> 2 (from 3,1)
[DEBUG DFA.intersection] Transition 13 --b--> 2 (from 3,1)
[DEBUG DFA.intersection] Transition 14 --a--> 2 (from 3,2)
[DEBUG DFA.intersection] Transition 14 --b--> 2 (from 3,2)
[DEBUG DFA.intersection] Transition 15 --a--> 3 (from 3,4)
[DEBUG DFA.intersection] Transition 15 --b--> 3 (from 3,4)
[DEBUG DFA.trim_unreachable] Starting to trim unreachable states
[DEBUG DFA.trim_unreachable] Starting BFS from state 4
[DEBUG DFA.trim_unreachable] Visited state 4
[DEBUG DFA.trim_unreachable] Queued state 8
[DEBUG DFA.trim_unreachable] Queued state 13
[DEBUG DFA.trim_unreachable] Visited state 8
[DEBUG DFA.trim_unreachable] Queued state 13
[DEBUG DFA.trim_unreachable] Visited state 13
[DEBUG DFA.trim_unreachable] Queued state 2
[DEBUG DFA.trim_unreachable] Queued state 2
[DEBUG DFA.trim_unreachable] Visited state 2
[DEBUG DFA.trim_unreachable] Removing unreachable state 0
[DEBUG DFA.trim_unreachable] Removing unreachable state 1
[DEBUG DFA.trim_unreachable] Removing unreachable state 3
[DEBUG DFA.trim_unreachable] Removing unreachable state 5
[DEBUG DFA.trim_unreachable] Removing unreachable state 6
[DEBUG DFA.trim_unreachable] Removing unreachable state 7
[DEBUG DFA.trim_unreachable] Removing unreachable state 9
[DEBUG DFA.trim_unreachable] Removing unreachable state 10
[DEBUG DFA.trim_unreachable] Removing unreachable state 11
[DEBUG DFA.trim_unreachable] Removing unreachable state 12
[DEBUG DFA.trim_unreachable] Removing unreachable state 14
[DEBUG DFA.trim_unreachable] Removing unreachable state 15
[DEBUG DFA.trim_unreachable] Final states: {2, 4, 8, 13}
[DEBUG DFA.intersection] Final intersection DFA: states={2, 4, 8, 13}, transitions={2: {'a': 2, 'b': 2}, 4: {'a': 8, 'b': 13}, 8: {'a': 8, 'b': 13}, 13: {'a': 2, 'b': 2}}
[DEBUG DFA.is_equivalent] Self ∩ ¬Other DFA: states={2, 4, 8, 13}, final={12, 14, 15}
[DEBUG DFA.complement] Creating complement DFA
[DEBUG DFA.complement] Complement final states: {0, 1, 2}
[DEBUG DFA.intersection] Product states: [(0, 0), (0, 1), (0, 2), (0, 4), (1, 0), (1, 1), (1, 2), (1, 4), (2, 0), (2, 1), (2, 2), (2, 4), (3, 0), (3, 1), (3, 2), (3, 4)]
[DEBUG DFA.intersection] Intersection start state: 4
[DEBUG DFA.intersection] Intersection final states: {1, 5, 9}
[DEBUG DFA.intersection] Transition 0 --a--> 0 (from 0,0)
[DEBUG DFA.intersection] Transition 0 --b--> 1 (from 0,0)
[DEBUG DFA.intersection] Transition 1 --a--> 2 (from 0,1)
[DEBUG DFA.intersection] Transition 1 --b--> 2 (from 0,1)
[DEBUG DFA.intersection] Transition 2 --a--> 2 (from 0,2)
[DEBUG DFA.intersection] Transition 2 --b--> 2 (from 0,2)
[DEBUG DFA.intersection] Transition 3 --a--> 3 (from 0,4)
[DEBUG DFA.intersection] Transition 3 --b--> 3 (from 0,4)
[DEBUG DFA.intersection] Transition 4 --a--> 8 (from 1,0)
[DEBUG DFA.intersection] Transition 4 --b--> 13 (from 1,0)
[DEBUG DFA.intersection] Transition 5 --a--> 10 (from 1,1)
[DEBUG DFA.intersection] Transition 5 --b--> 14 (from 1,1)
[DEBUG DFA.intersection] Transition 6 --a--> 10 (from 1,2)
[DEBUG DFA.intersection] Transition 6 --b--> 14 (from 1,2)
[DEBUG DFA.intersection] Transition 7 --a--> 11 (from 1,4)
[DEBUG DFA.intersection] Transition 7 --b--> 15 (from 1,4)
[DEBUG DFA.intersection] Transition 8 --a--> 8 (from 2,0)
[DEBUG DFA.intersection] Transition 8 --b--> 13 (from 2,0)
[DEBUG DFA.intersection] Transition 9 --a--> 10 (from 2,1)
[DEBUG DFA.intersection] Transition 9 --b--> 14 (from 2,1)
[DEBUG DFA.intersection] Transition 10 --a--> 10 (from 2,2)
[DEBUG DFA.intersection] Transition 10 --b--> 14 (from 2,2)
[DEBUG DFA.intersection] Transition 11 --a--> 11 (from 2,4)
[DEBUG DFA.intersection] Transition 11 --b--> 15 (from 2,4)
[DEBUG DFA.intersection] Transition 12 --a--> 0 (from 3,0)
[DEBUG DFA.intersection] Transition 12 --b--> 1 (from 3,0)
[DEBUG DFA.intersection] Transition 13 --a--> 2 (from 3,1)
[DEBUG DFA.intersection] Transition 13 --b--> 2 (from 3,1)
[DEBUG DFA.intersection] Transition 14 --a--> 2 (from 3,2)
[DEBUG DFA.intersection] Transition 14 --b--> 2 (from 3,2)
[DEBUG DFA.intersection] Transition 15 --a--> 3 (from 3,4)
[DEBUG DFA.intersection] Transition 15 --b--> 3 (from 3,4)
[DEBUG DFA.trim_unreachable] Starting to trim unreachable states
[DEBUG DFA.trim_unreachable] Starting BFS from state 4
[DEBUG DFA.trim_unreachable] Visited state 4
[DEBUG DFA.trim_unreachable] Queued state 8
[DEBUG DFA.trim_unreachable] Queued state 13
[DEBUG DFA.trim_unreachable] Visited state 8
[DEBUG DFA.trim_unreachable] Queued state 13
[DEBUG DFA.trim_unreachable] Visited state 13
[DEBUG DFA.trim_unreachable] Queued state 2
[DEBUG DFA.trim_unreachable] Queued state 2
[DEBUG DFA.trim_unreachable] Visited state 2
[DEBUG DFA.trim_unreachable] Removing unreachable state 0
[DEBUG DFA.trim_unreachable] Removing unreachable state 1
[DEBUG DFA.trim_unreachable] Removing unreachable state 3
[DEBUG DFA.trim_unreachable] Removing unreachable state 5
[DEBUG DFA.trim_unreachable] Removing unreachable state 6
[DEBUG DFA.trim_unreachable] Removing unreachable state 7
[DEBUG DFA.trim_unreachable] Removing unreachable state 9
[DEBUG DFA.trim_unreachable] Removing unreachable state 10
[DEBUG DFA.trim_unreachable] Removing unreachable state 11
[DEBUG DFA.trim_unreachable] Removing unreachable state 12
[DEBUG DFA.trim_unreachable] Removing unreachable state 14
[DEBUG DFA.trim_unreachable] Removing unreachable state 15
[DEBUG DFA.trim_unreachable] Final states: {2, 4, 8, 13}
[DEBUG DFA.intersection] Final intersection DFA: states={2, 4, 8, 13}, transitions={2: {'a': 2, 'b': 2}, 4: {'a': 8, 'b': 13}, 8: {'a': 8, 'b': 13}, 13: {'a': 2, 'b': 2}}
[DEBUG DFA.is_equivalent] ¬Self ∩ Other DFA: states={2, 4, 8, 13}, final={1, 5, 9}
[DEBUG DFA.union] Product states: [(2, 2), (2, 4), (2, 8), (2, 13), (4, 2), (4, 4), (4, 8), (4, 13), (8, 2), (8, 4), (8, 8), (8, 13), (13, 2), (13, 4), (13, 8), (13, 13)]
[DEBUG DFA.union] Union start state: 5
[DEBUG DFA.union] Union final states: set()
[DEBUG DFA.union] Transition 0 --a--> 0 (from 2,2)
[DEBUG DFA.union] Transition 0 --b--> 0 (from 2,2)
[DEBUG DFA.union] Transition 1 --a--> 2 (from 2,4)
[DEBUG DFA.union] Transition 1 --b--> 3 (from 2,4)
[DEBUG DFA.union] Transition 2 --a--> 2 (from 2,8)
[DEBUG DFA.union] Transition 2 --b--> 3 (from 2,8)
[DEBUG DFA.union] Transition 3 --a--> 0 (from 2,13)
[DEBUG DFA.union] Transition 3 --b--> 0 (from 2,13)
[DEBUG DFA.union] Transition 4 --a--> 8 (from 4,2)
[DEBUG DFA.union] Transition 4 --b--> 12 (from 4,2)
[DEBUG DFA.union] Transition 5 --a--> 10 (from 4,4)
[DEBUG DFA.union] Transition 5 --b--> 15 (from 4,4)
[DEBUG DFA.union] Transition 6 --a--> 10 (from 4,8)
[DEBUG DFA.union] Transition 6 --b--> 15 (from 4,8)
[DEBUG DFA.union] Transition 7 --a--> 8 (from 4,13)
[DEBUG DFA.union] Transition 7 --b--> 12 (from 4,13)
[DEBUG DFA.union] Transition 8 --a--> 8 (from 8,2)
[DEBUG DFA.union] Transition 8 --b--> 12 (from 8,2)
[DEBUG DFA.union] Transition 9 --a--> 10 (from 8,4)
[DEBUG DFA.union] Transition 9 --b--> 15 (from 8,4)
[DEBUG DFA.union] Transition 10 --a--> 10 (from 8,8)
[DEBUG DFA.union] Transition 10 --b--> 15 (from 8,8)
[DEBUG DFA.union] Transition 11 --a--> 8 (from 8,13)
[DEBUG DFA.union] Transition 11 --b--> 12 (from 8,13)
[DEBUG DFA.union] Transition 12 --a--> 0 (from 13,2)
[DEBUG DFA.union] Transition 12 --b--> 0 (from 13,2)
[DEBUG DFA.union] Transition 13 --a--> 2 (from 13,4)
[DEBUG DFA.union] Transition 13 --b--> 3 (from 13,4)
[DEBUG DFA.union] Transition 14 --a--> 2 (from 13,8)
[DEBUG DFA.union] Transition 14 --b--> 3 (from 13,8)
[DEBUG DFA.union] Transition 15 --a--> 0 (from 13,13)
[DEBUG DFA.union] Transition 15 --b--> 0 (from 13,13)
[DEBUG DFA.trim_unreachable] Starting to trim unreachable states
[DEBUG DFA.trim_unreachable] Starting BFS from state 5
[DEBUG DFA.trim_unreachable] Visited state 5
[DEBUG DFA.trim_unreachable] Queued state 10
[DEBUG DFA.trim_unreachable] Queued state 15
[DEBUG DFA.trim_unreachable] Visited state 10
[DEBUG DFA.trim_unreachable] Queued state 15
[DEBUG DFA.trim_unreachable] Visited state 15
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Visited state 0
[DEBUG DFA.trim_unreachable] Removing unreachable state 1
[DEBUG DFA.trim_unreachable] Removing unreachable state 2
[DEBUG DFA.trim_unreachable] Removing unreachable state 3
[DEBUG DFA.trim_unreachable] Removing unreachable state 4
[DEBUG DFA.trim_unreachable] Removing unreachable state 6
[DEBUG DFA.trim_unreachable] Removing unreachable state 7
[DEBUG DFA.trim_unreachable] Removing unreachable state 8
[DEBUG DFA.trim_unreachable] Removing unreachable state 9
[DEBUG DFA.trim_unreachable] Removing unreachable state 11
[DEBUG DFA.trim_unreachable] Removing unreachable state 12
[DEBUG DFA.trim_unreachable] Removing unreachable state 13
[DEBUG DFA.trim_unreachable] Removing unreachable state 14
[DEBUG DFA.trim_unreachable] Final states: {0, 5, 10, 15}
[DEBUG DFA.union] Final union DFA: states={0, 5, 10, 15}, transitions={0: {'a': 0, 'b': 0}, 5: {'a': 10, 'b': 15}, 10: {'a': 10, 'b': 15}, 15: {'a': 0, 'b': 0}}
[DEBUG DFA.is_equivalent] Symmetric difference: states={0, 5, 10, 15}, final=set()
[DEBUG DFA.trim_unreachable] Starting to trim unreachable states
[DEBUG DFA.trim_unreachable] Starting BFS from state 5
[DEBUG DFA.trim_unreachable] Visited state 5
[DEBUG DFA.trim_unreachable] Queued state 10
[DEBUG DFA.trim_unreachable] Queued state 15
[DEBUG DFA.trim_unreachable] Visited state 10
[DEBUG DFA.trim_unreachable] Queued state 15
[DEBUG DFA.trim_unreachable] Visited state 15
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Queued state 0
[DEBUG DFA.trim_unreachable] Visited state 0
[DEBUG DFA.trim_unreachable] Final states: {0, 5, 10, 15}
[DEBUG DFA.is_equivalent] After trimming: states={0, 5, 10, 15}
[DEBUG DFA.is_empty] Queuing transition 5 --a--> 10
[DEBUG DFA.is_empty] Queuing transition 5 --b--> 15
[DEBUG DFA.is_empty] Queuing transition 10 --a--> 10
[DEBUG DFA.is_empty] Queuing transition 10 --b--> 15
[DEBUG DFA.is_empty] Queuing transition 15 --a--> 0
[DEBUG DFA.is_empty] Queuing transition 15 --b--> 0
[DEBUG DFA.is_empty] Queuing transition 0 --a--> 0
[DEBUG DFA.is_empty] Queuing transition 0 --b--> 0
[DEBUG DFA.is_empty] No final states reached, DFA is empty
[DEBUG DFA.is_equivalent] Equivalence result: (True, None)

Is the learned hypothesis equivalent to the target? True